
(*
 Copyright (C) 2013 Emmanuel Pouthier

 This file is part of Aye-Aye.

 Aye-Aye is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Aye-Aye is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)



(* zut *)
zut ::= ( comment | statement )*;

comment ::= line-comment | block-comment;
line-comment(value) ::= "//" .* {END-LINE};
block-comment(value) ::= "/*" .* "*/";




(* statement *)
statement ::= variable-statement | affectation-statement |
              if-statement | while-statement | do-while-statement | for-statement |
              break-statement | continue-statement |
              function-statement | call-function-statement | return-statement;

block-statement ::= "{" statement* "}";

variable-statement ::= "var " variable-identifier initialization-expression ( "," variable-identifier initialization-expression )* ";";
affectation-statement ::= variable-identifier affectation-expression ";";

if-statement ::= "if" "(" expression ")" block-statement else-if-statement* [ else-statement ];
else-if-statement ::= "else" "if" "(" expression ")" block-statement;
else-statement ::= "else" block-statement;

while-statement ::= "while" "(" expression ")" block-statement;
do-while-statement ::= "do" block-statement "while" "(" expression ")" ";";
for-statement ::= "for" "(" variable-identifier initialization-expression ";" expression ";" variable-identifier affectation-expression ")" block-statement;

break-statement ::= "break" ";";
continue-statement ::= "continue" ";";

function-statement ::= "function" function-identifier "(" [ variable-identifier initialization-expression ( "," variable-identifier initialization-expression )* ] ")" block-statement;
call-function-statement ::= function-identifier "(" [ expression ( "," expression )* ] ")" ";";
return-statement ::= "return" "(" expression ( "," expression )* ")" ";";



(* expression *)
expression ::= unary-expression ( operator unary-expression )*;
unary-expression ::= [ pre-operator ] ( group-expression | value-identifier | variable-identifier );

group-expression ::= "(" expression ")";

initialization-expression ::= [ "=" expression ];
affectation-expression ::= increment-decrement-operator | affectation-operator expression;



(* operator *)
pre-operator ::= arythmetic-pre-operator | logical-pre-operator;
operator ::= arythmetic-operator | relational-operator | logical-operator;

arythmetic-pre-operator(value) ::= "+" | "-";
logical-pre-operator(value) ::= "!";

arythmetic-operator(value) ::= "+" | "-" | "*" | "/" | "%";
relational-operator(value) ::= "==" | "!=" | "<=" | ">=" | "<" | ">";
logical-operator(value) ::= "&&" | "||";

increment-decrement-operator(value) ::= "++" | "--";
affectation-operator(value) ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=";



(* identifier *)
variable-identifier(value) ::= ( {ALPHA-LC} | "_" ) ( {ALPHA-UC} | {ALPHA-LC} | {DIGIT} | "_" )*;

function-identifier(value) ::= ( {ALPHA-LC} | "_" ) ( {ALPHA-UC} | {ALPHA-LC} | {DIGIT} | "_" )*;

value-identifier ::= boolean-identifier | number-identifier | string-identifier;
boolean-identifier(value) ::= "true" | "false";
number-identifier(value) ::= {DIGIT}+ [ "." {DIGIT}+ ];
string-identifier(value) ::= '"' .* '"' | "'" .* "'";

